<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Christopher G. Mcintyre</title>
        <link>https://cgmcintyre.com</link>
        <description>Christopher G. McIntyre&#x27;s Personal Website
</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://cgmcintyre.com/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 11 Apr 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Hello, Zola!</title>
                <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
                <link>https://cgmcintyre.com/posts/hello-zola/</link>
                <guid>https://cgmcintyre.com/posts/hello-zola/</guid>
                <description>&lt;p&gt;For the past couple of years I&#x27;ve used &lt;a href=&quot;https:&#x2f;&#x2f;gohugo.io&#x2f;&quot;&gt;hugo&lt;&#x2f;a&gt; for my
personal website &lt;a href=&quot;http:&#x2f;&#x2f;cgmcintyre.com&quot;&gt;cgmcintyre.com&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Thanks to the superb themes available, I got up running super quick with
&lt;a href=&quot;https:&#x2f;&#x2f;themes.gohugo.io&#x2f;minimo&#x2f;&quot;&gt;minimo&lt;&#x2f;a&gt;. However I&#x27;ve never really
changed anything about the website since.&lt;&#x2f;p&gt;
&lt;p&gt;I recently looked at customising the theme, but became overwhelmed with
go templating, archetypes, and the sheer amount of features.&lt;&#x2f;p&gt;
&lt;p&gt;I&#x27;ve been looking for a batteries-included static site generator that can
just turn some markdown and sass into a website. This lead me to moving my
website to &lt;a href=&quot;https:&#x2f;&#x2f;www.getzola.org&quot;&gt;zola&lt;&#x2f;a&gt; due to it having:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;Super simple config.toml file.&lt;&#x2f;li&gt;
&lt;li&gt;Sensible sass theming and syntax highlighting out of the box.&lt;&#x2f;li&gt;
&lt;li&gt;A templating language that feels similar to Jinja2 (I first started
programming using Django).&lt;&#x2f;li&gt;
&lt;li&gt;Written in a language I am actively learning.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;I&#x27;m sure I could have stripped back Hugo to do what I want, and ignored
all the other features, but for me Zola just clicks.&lt;&#x2f;p&gt;
&lt;p&gt;Thanks for reading, and here&#x27;s to me being more active with this website!&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#010101;&quot;&gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;class &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;Test
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;def &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;test&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;rargh &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#646409;&quot;&gt;int &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;):
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;print&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
    
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;+ &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;test &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;21
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;</description>
            </item>
        
            <item>
                <title>Writing an Audio Plugin in Rust</title>
                <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
                <link>https://cgmcintyre.com/posts/writing-an-audio-plugin-in-rust/</link>
                <guid>https://cgmcintyre.com/posts/writing-an-audio-plugin-in-rust/</guid>
                <description>&lt;p&gt;Along the long and slightly convoluted path I took to finding my current career as a software developer, I ended up spending a year at college studying music. It didn&#x27;t really amount to much in the way of gainful employment, but &lt;a href=&quot;https:&#x2f;&#x2f;soundcloud.com&#x2f;17cupsofcoffee&quot;&gt;it&#x27;s still something I&#x27;m really passionate about&lt;&#x2f;a&gt;, and I&#x27;d really like to find more ways of combining it with my love of programming.&lt;&#x2f;p&gt;
&lt;p&gt;So when I stumbled across the &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;overdrivenpotato&#x2f;rust-vst2&#x2f;&quot;&gt;&lt;code&gt;vst2&lt;&#x2f;code&gt; Rust crate&lt;&#x2f;a&gt; (created by the delightfully named &#x27;overdrivenpotato&#x27;), I couldn&#x27;t resist taking some time out of my Saturday to check it out.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2f;&#x2f;cgmcintyre.com&#x2f;posts&#x2f;writing-an-audio-plugin-in-rust&#x2f;nerd_sniping.png&quot; alt=&quot;There&#x27;s always a relevant XKCD.&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;I&#x27;m no audio programming wizard, so I&#x27;m going to start really simple by throwing together a bare-bones digital distortion effect, based on the algorithm from &lt;a href=&quot;http:&#x2f;&#x2f;www.martin-finke.de&#x2f;blog&#x2f;articles&#x2f;audio-plugins-005-digital-distortion&#x2f;&quot;&gt;this tutorial by Martin Finke&lt;&#x2f;a&gt;. You can find the final source code on GitHub &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;17cupsofcoffee&#x2f;digidist&quot;&gt;here&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2f;h2&gt;
&lt;p&gt;To follow along with this tutorial, you&#x27;ll need:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;The latest stable version of &lt;a href=&quot;https:&#x2f;&#x2f;www.rust-lang.org&#x2f;en-US&#x2f;&quot;&gt;Rust&lt;&#x2f;a&gt; - 1.16.0, at the time of writing.&lt;&#x2f;li&gt;
&lt;li&gt;A VST host to test the plugin with - I&#x27;m using Ableton Live 9, but if you don&#x27;t own a DAW you can download the evaluation version of &lt;a href=&quot;http:&#x2f;&#x2f;www.reaper.fm&#x2f;&quot;&gt;Reaper&lt;&#x2f;a&gt; for free.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;It&#x27;s worth noting that I&#x27;m running the 64-bit version of Ableton on Windows - if you&#x27;re using a 32-bit plugin host, you&#x27;ll need to compile your plugin with the 32-bit Rust toolchain. If you&#x27;re on Mac, you can use &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;overdrivenpotato&#x2f;rust-vst2&#x2f;blob&#x2f;master&#x2f;osx_vst_bundler.sh&quot;&gt;zywicki&#x27;s handy shell script&lt;&#x2f;a&gt; to package the library in a format that will work for you.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;the-bare-minimum&quot;&gt;The Bare Minimum&lt;&#x2f;h2&gt;
&lt;p&gt;Let&#x27;s start as simple as possible, by getting a completely empty VST plugin loading into our host. All it&#x27;ll do is pass through audio unaltered - not very exciting, but it&#x27;ll prove our code works.&lt;&#x2f;p&gt;
&lt;p&gt;First, create a new Rust library using Cargo:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#696989;&quot;&gt;cargo&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; new digidist
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;cd&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; digidist
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;In our &lt;code&gt;cargo.toml&lt;&#x2f;code&gt;, let&#x27;s add a dependency on &lt;code&gt;vst2&lt;&#x2f;code&gt;. While we&#x27;re at it, we&#x27;ll also set the type of our crate to &lt;code&gt;dylib&lt;&#x2f;code&gt;, so that the compiler will output a dynamic library.&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#010101;&quot;&gt;[&lt;&#x2f;span&gt;&lt;span style=&quot;color:#0067c2;&quot;&gt;package&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;]
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;name &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;digidist&amp;quot;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;version &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;authors &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;= [&lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;Joe Clay &amp;lt;27cupsofcoffee@gmail.com&amp;gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;]

[&lt;&#x2f;span&gt;&lt;span style=&quot;color:#0067c2;&quot;&gt;dependencies&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;]
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;vst2 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;0.0.1&amp;quot;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;[&lt;&#x2f;span&gt;&lt;span style=&quot;color:#0067c2;&quot;&gt;lib&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;]
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;crate-type &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;= [&lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;dylib&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;]
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now we can actually start laying the groundwork for our plugin. In order for the &lt;code&gt;vst2&lt;&#x2f;code&gt; crate to work its magic, we need to do three things:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a struct that implements &lt;code&gt;Default&lt;&#x2f;code&gt;, to represent our plugin.&lt;&#x2f;li&gt;
&lt;li&gt;Implement the &lt;a href=&quot;http:&#x2f;&#x2f;overdrivenpotato.github.io&#x2f;rust-vst2&#x2f;vst2&#x2f;plugin&#x2f;trait.Plugin.html&quot;&gt;&lt;code&gt;Plugin&lt;&#x2f;code&gt;&lt;&#x2f;a&gt; trait on our struct. This trait features many methods (some of which we&#x27;ll go over later), but all of them except &lt;a href=&quot;http:&#x2f;&#x2f;overdrivenpotato.github.io&#x2f;rust-vst2&#x2f;vst2&#x2f;plugin&#x2f;trait.Plugin.html#tymethod.get_info&quot;&gt;&lt;code&gt;get_info&lt;&#x2f;code&gt;&lt;&#x2f;a&gt; provide default implementations. &lt;&#x2f;li&gt;
&lt;li&gt;Call the &lt;a href=&quot;http:&#x2f;&#x2f;overdrivenpotato.github.io&#x2f;rust-vst2&#x2f;src&#x2f;vst2&#x2f;src&#x2f;lib.rs.html#144-165&quot;&gt;&lt;code&gt;plugin_main!&lt;&#x2f;code&gt;&lt;&#x2f;a&gt; macro with our struct - this generates the code that allows a host to hook into our library, as per the VST specification. &lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;With all that in place, our code should look something like this:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; lib.rs

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;#[&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;macro_use&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;] &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;extern crate&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; vst2;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;use &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;vst2::buffer::AudioBuffer;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;use &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;vst2::plugin::{Plugin, Info};

#[&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;derive&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(Default)]
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;struct &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;DigiDist&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;impl &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Plugin &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;DigiDist &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;get_info&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) -&amp;gt; Info {
        Info {
            name: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;DigiDist&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
            vendor: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;17cupsofcoffee&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
            unique_id: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;25032017&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;,

            &lt;&#x2f;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; fill in the rest with the default values
            &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;..&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Info::default()
        }
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#646409;&quot;&gt;plugin_main!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(DigiDist);
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Believe it or not, that&#x27;s all that&#x27;s required to create our bare minimum VST! Run &lt;code&gt;cargo build&lt;&#x2f;code&gt;, and then copy &lt;code&gt;target&#x2f;debug&#x2f;digidist.dll&lt;&#x2f;code&gt; into your host&#x27;s plugins folder. All being well, you should be able to load it onto a track:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2f;&#x2f;cgmcintyre.com&#x2f;posts&#x2f;writing-an-audio-plugin-in-rust&#x2f;ui1.png&quot; alt=&quot;Our empty plugin running in Ableton&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;h2 id=&quot;audio-mangling&quot;&gt;Audio Mangling&lt;&#x2f;h2&gt;
&lt;div class=&quot;post-body__note&quot;&gt;
    &lt;p class=&quot;post-body__note__text&quot;&gt;
        Before we start writing our actual audio processing code, a quick warning - make sure that you turn down your volume, and place a limiter on your host&#x27;s audio output when developing VSTs! Your ears will thank you the first time you run into a bug.
    &lt;&#x2f;p&gt;
&lt;&#x2f;div&gt;
&lt;p&gt;Our digital distortion plugin is going to have:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;One parameter - the loudness threshold at which to begin clipping the audio signal&lt;&#x2f;li&gt;
&lt;li&gt;Two inputs (left and right)&lt;&#x2f;li&gt;
&lt;li&gt;Two outputs (left and right)&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;We can add this information to our plugin with very little effort:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; lib.rs

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;impl &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Plugin &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;DigiDist &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;get_info&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) -&amp;gt; Info {
        Info {
            name: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;DigiDist&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
            vendor: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;17cupsofcoffee&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
            unique_id: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;25032017&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;,

            inputs: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;,
            outputs: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;2&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;,
            parameters: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;,

            &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;..&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Info::default()
        }
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;We&#x27;re going to have to store that parameter somewhere, so let&#x27;s add a field to our struct. While we&#x27;re at it, we&#x27;ll also manually implement &lt;code&gt;Default&lt;&#x2f;code&gt;, so that our threshold slider will start at the maximum value (i.e. no distortion) rather than at zero.&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; lib.rs

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;struct &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;DigiDist &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;threshold&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;f32
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;}

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;impl &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Default &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;DigiDist &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;default&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;() -&amp;gt; DigiDist {
        DigiDist {
            threshold: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1.0
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;}
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;In order to link this field up to our VST&#x27;s interface in the host application, we need to implement five methods from the &lt;code&gt;Plugin&lt;&#x2f;code&gt; trait, which all take an integer index:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_parameter&lt;&#x2f;code&gt; - gets the parameter&#x27;s actual value, from 0.0 to 1.0&lt;&#x2f;li&gt;
&lt;li&gt;&lt;code&gt;set_parameter&lt;&#x2f;code&gt; - sets the parameter&#x27;s actual value, from 0.0 to 1.0&lt;&#x2f;li&gt;
&lt;li&gt;&lt;code&gt;get_parameter_name&lt;&#x2f;code&gt; - gets the text that should be displayed as the parameter&#x27;s name in the host application&lt;&#x2f;li&gt;
&lt;li&gt;&lt;code&gt;get_parameter_text&lt;&#x2f;code&gt; - gets the text that should be displayed as the parameter&#x27;s value in the host application&lt;&#x2f;li&gt;
&lt;li&gt;&lt;code&gt;get_parameter_label&lt;&#x2f;code&gt; - gets the label that should be displayed next to the value (e.g. dB, %, On&#x2f;Off)&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;For our plugin, the implementations will look like this:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; lib.rs, inside &amp;#39;impl Plugin for DigiDist&amp;#39;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;get_parameter&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;index&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;i32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) -&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;f32 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;match&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; index {
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold,
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;_ =&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0.0&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;,
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;set_parameter&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;mut &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;index&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;i32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;value&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;f32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;match&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; index {
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; We don&amp;#39;t want to divide by zero, so we&amp;#39;ll clamp the value
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; value.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;max&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0.01&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;),
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;_ =&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;get_parameter_name&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;index&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;i32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) -&amp;gt; String {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;match&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; index {
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;Threshold&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;_ =&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;get_parameter_text&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;index&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;i32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) -&amp;gt; String {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;match&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; index {
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; Convert to a percentage
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#646409;&quot;&gt;format!&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;{}&lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;* &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;100.0&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;),
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;_ =&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
    }
}

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;get_parameter_label&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;index&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;i32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) -&amp;gt; String {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;match&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; index {
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;%&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;_ =&amp;gt; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;to_string&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(),
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now for the exciting part - let&#x27;s mangle some audio! The algorithm for this distortion effect is going to be very, very simple:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#010101;&quot;&gt;&#x2f;&#x2f; pseudo-code

if input &amp;gt;= 0
  output = min(input, threshold) &#x2f; threshold
else
  output = max(input, -threshold) &#x2f; threshold
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Thanks to the nicely designed buffer API provided by the vst2 crate, our actual processing code looks pretty much the same!&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; lib.rs, inside &amp;#39;impl Plugin for DigiDist&amp;#39;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;fn &lt;&#x2f;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;process&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;mut &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;buffer&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;: AudioBuffer&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;f32&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;&amp;gt;) {
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; Split out the input and output buffers into two vectors
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;let &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(inputs, outputs) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; buffer.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;split&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;();

    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;&#x2f;&#x2f; For each buffer, transform the samples
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(input_buffer, output_buffer) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;in&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; inputs.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;iter&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;().&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;zip&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(outputs) {
        &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;for &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(input_sample, output_sample) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;in&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; input_buffer.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;iter&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;().&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;zip&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(output_buffer) {

            &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if *&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;input_sample &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&amp;gt;= &lt;&#x2f;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0.0 &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
                &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;*&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;output_sample &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; input_sample.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;min&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&#x2f; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold;
            }
            &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;else &lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;{
                &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;*&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;output_sample &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt; input_sample.&lt;&#x2f;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;max&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;-&lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold) &lt;&#x2f;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;&#x2f; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2f;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.threshold;
            }

        }
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;That&#x27;s it, we&#x27;re done! Compile your code, install the DLL into your host, and let&#x27;s see how it looks and sounds. Turn down your volume - Soundcloud&#x27;s embeds are always way too loud!&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2f;&#x2f;cgmcintyre.com&#x2f;posts&#x2f;writing-an-audio-plugin-in-rust&#x2f;ui2.png&quot; alt=&quot;Look, parameters!&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;&lt;iframe title=&quot;Example Audio&quot; width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https:&#x2f;&#x2f;w.soundcloud.com&#x2f;player&#x2f;?url=https%3A&#x2f;&#x2f;api.soundcloud.com&#x2f;tracks&#x2f;314423898%3Fsecret_token%3Ds-C1L7o&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;&#x2f;iframe&gt;&lt;&#x2f;p&gt;
&lt;p&gt;Hm. I&#x27;m not exactly Aphex Twin, am I? But it&#x27;s a start!&lt;&#x2f;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2f;h2&gt;
&lt;p&gt;Hopefully you found this quick tour of the &lt;code&gt;vst2&lt;&#x2f;code&gt; crate as fun as I did - I&#x27;m floored by how quickly I was able to go from &amp;quot;hey, this sounds like it&#x27;d be a cool idea&amp;quot; to having a working plugin!&lt;&#x2f;p&gt;
&lt;p&gt;Honestly, that&#x27;s my experience of Rust in a nutshell. This language makes so many of the things that used to only be the realm of experienced C++ programmers accessible to the rest of us - I find that really exciting!&lt;&#x2f;p&gt;
</description>
            </item>
        
    </channel>
</rss>
